{% extends 'base.html.twig' %}
    {% set display_button = display_button|default(false) %}
{% block body %}
    <div class="row m-t-40 m-b-40">
        <div class="col-12 col-md-8 offset-md-2">
            <h1>Salut à <u>toi</u>,</h1>
            <p>
                {% if display_button is same as true %}
                    Si tu es ici, c'est que nous avons déjà eu un premier entretien, lors de cet entretien, je t'ai certainement dit quelle consigne tu dois suivre pour ce test technique.
                    Les consignes d'installation se trouvent dans le fichier Readme.md, mais elles sont aussi consultables <a href="{{ path('consignes_installation') }}">ici</a>.
                {% else %}
                    Tu peux retrouver les informations concernant l'installation du projet <a href="{{ path('consignes_installation') }}">ici</a>.
                {% endif %}
            </p>
        </div>
    </div>
    {% if display_button is same as true %}
        <div class="row">
            <div class="col-12 col-md-8 offset-md-2 text-center">
                <div class="row m-t-40">
                    <div class="col-12 d-flex justify-content-evenly">
                        <button class="btn btn-primary" type="button" id="btnCollapseJunior">Consignes profil Junior</button>
                        <button class="btn btn-warning" type="button" id="btnCollapseConfirmed">Consignes profil Confirmé</button>
                        <button class="btn btn-danger" type="button" id="btnCollapseConfirmedReact">Consignes profil Confirmé React</button>
                    </div>
                </div>
                <div class="row m-t-40">
                    <div class="col-12 col-md-8 offset-md-2 text-justify">
                        <div class="row">
                            <div class="col-12 d-none" id="contentCollapseJunior">
                                <div class="card card-body consignes">
                                    {% apply markdown_to_html %}
                                        ## <u>Objectif 1</u> *(obligatoire)*
                                        Le but de ce test est d'afficher les commentaires dans les pages d'articles. Il faudra utiliser [Symfony UX Twig Components](https://symfony.com/bundles/ux-twig-component/current/index.html).

                                        Si un article n'a pas de commentaire, tu n'as pas besoin d'afficher quelque chose.

                                        l'attendu :

                                        ![Objectif 1]({{ asset('build/images/test-technique-etape-1.png') }} "Objectif 1")

                                        ## <u>Objectif 2</u> *(obligatoire)*
                                        Tu devras changer l'animation des pages actuellement elles sont animés pour un affichage de slide vers le bas. l'attendu est un affichage de la page en fade-in fade-out.

                                        l'attendu :

                                        ![Objectif 2]({{ asset('build/images/test-technique-etape-2.gif') }} "Objectif 2")

                                        ## <u>Objectif 3</u> *(optionnel)*
                                        Lors de ce troisième objectif, je souhaite pouvoir bénéficier de la fonctionnalité d'ajout d'un commentaire à un article.
                                        Le nom de l'utilisateur est obligatoire et la date de création doit être générée automatiquement. Un petit plus serait de pouvoir utiliser un champ de texte CKEditor.

                                        *Pour cette troisième partie il n'y a pas d'attendu d'un point de vue design en particulier. Mais il faut que ca s'integre bien dans le site.*
                                    {% endapply %}
                                </div>
                            </div>
                            <div class="col-12 d-none" id="contentCollapseConfirmed">
                                <div class="card card-body consignes">
                                    {% apply markdown_to_html %}
                                        ## <u>Objectif 1 (environ 1h)</u>
                                        1. Tu devras créer un nouveau crud sur une nouvelle entité : **Catégorie**
                                        Caractéristique de l'entité:
                                            * Une Catégorie peut avoir plusieurs articles, mais un article est lié à une seule catégorie.
                                            * Une date de création.
                                            * Une date de modification.
                                            * Un intitulé.
                                        2. Il faudra créer la nouvelle entité et les fichiers qui vont avec en suivant le pattern d'écriture que nous utilisons.
                                        3. Il faudra créer des fixtures de Catégories (15 catégories avec des noms générés aléatoirement).

                                        ---
                                        ## <u>Objectif 2 (environ 2h)</u>
                                        Dans le fichier CategorieController.php il faudra implémenter:
                                        1. Une vue qui rend sous forme de tableau <a href="https://symfonycasts.com/screencast/doctrine-relations/pagination" target="_blank">paginé</a> (limite par page: 10)
                                        2. Une vue qui permet de créer une nouvelle catégorie
                                        3. Une vue qui permet la modification d'une catégorie
                                        4. Sur la vue qui rend le <a href="{{ path('consignes_examples')}}" data-no-swup target="_blank">tableau paginé</a> je souhaite sur la ligne du tableau voir les informations suivantes :
                                            - Nom de la catégorie
                                            - Nombre d'articles liés à la catégorie.
                                            - Je souhaite aussi avoir deux boutons :
                                                - Editer une catégorie. (il faudra utiliser la vue précédement crée)
                                                - Supprimer une catégorie. (il faudra créer la logique de suppression)

                                        5. Dans la méthode qui permet la suppression d'une catégorie, je souhaite avoir une vérification. S'il n'y a pas d'articles liés à une catégorie alors il est possible de la supprimer. S'il y a, un ou plusieurs articles lié à cette catégorie alors la suppression ne se fait pas et je souhaite avoir un message d'erreur (flashBag) qui mentionne ceci :

                                        <div class="alert alert-danger" role="alert">
                                            La catégorie ne peut pas être supprimée, car un ou plusieurs articles sont liés à celle-ci.
                                        </div>

                                        Dans la mesure du possible, il faudra mutualiser les méthodes.
                                        La vue liste doit se trouver sur cette url : <a href="http://localhost:8088/categorie/liste" data-no-swup target="_blank">http://localhost:8088/categorie/liste</a>

                                    {% endapply %}
                                </div>
                            </div>
                            <div class="col-12 d-none" id="contentCollapseConfirmedReact">
                                <div class="card card-body consignes">
                                    {% apply markdown_to_html %}
                                        Je t'ai mis à disposition une api qui expose les articles, les tags et les users.
                                        Cette api est accessible via cette url <a href="http://localhost:8088/api" data-no-swup target="_blank">http://localhost:8088/api</a>
                                        Il n'y a pas besoin d'authentification pour récupérer les datas de cette API.
                                        Actuellement, le projet n'est pas encore configuré pour du développement REACT. Cependant webpack est installé.

                                        ## <u>Objectif 1</u>
                                        1. Mettre en place une SPA sur l'url <a href="http://localhost:8088/react/index-copy" data-no-swup target="_blank">http://localhost:8088/react/index-copy</a> (le template associé se trouve ici "templates/home/react.html.twig")
                                        2. À l'aide de call API il faudra réaliser une copie conforme de la page d'accueil de l'application. La seule différence sera qu'il faut réaliser une pagination des articles, nous voulons 7 articles par page.
                                        3. Je souhaite également que lorsque je clique sur un article, je puisse voir son contenu à l'image de ce qui est fait sur la page d'accueil. Il faudra cependant que l'on reste dans le principe d'une SPA.
                                    {% endapply %}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    {% else %}
        {% block consignes %}
        {% endblock %}
    {% endif %}
{% endblock %}
{% block javascripts_end %}
    {% if display_button is same as true %}
        <script type="text/javascript">
            btnJunior = document.getElementById('btnCollapseJunior');
            btnConfirmed = document.getElementById('btnCollapseConfirmed');
            btnConfirmedReact = document.getElementById('btnCollapseConfirmedReact');
            contentJunior = document.getElementById('contentCollapseJunior');
            contentConfirmed = document.getElementById('contentCollapseConfirmed');
            contentConfirmedReact = document.getElementById('contentCollapseConfirmedReact');

            btnJunior.onclick = function() {
                if (contentJunior.classList.contains('d-none')) {
                    contentJunior.classList.remove('d-none');
                    if (!contentConfirmed.classList.contains('d-none')) {
                        contentConfirmed.classList.add('d-none');
                    }
                    if (!contentConfirmedReact.classList.contains('d-none')) {
                        contentConfirmedReact.classList.add('d-none');
                    }
                } else {
                    contentJunior.classList.add('d-none');
                }
            }

            btnConfirmed.onclick = function() {
                if (contentConfirmed.classList.contains('d-none')) {
                    contentConfirmed.classList.remove('d-none');
                    if (!contentJunior.classList.contains('d-none')) {
                        contentJunior.classList.add('d-none');
                    }
                    if (!contentConfirmedReact.classList.contains('d-none')) {
                        contentConfirmedReact.classList.add('d-none');
                    }
                } else {
                    contentConfirmed.classList.add('d-none');
                }
            }

            btnConfirmedReact.onclick = function() {
                if (contentConfirmedReact.classList.contains('d-none')) {
                    contentConfirmedReact.classList.remove('d-none');
                    if (!contentJunior.classList.contains('d-none')) {
                        contentJunior.classList.add('d-none');
                    }
                    if (!contentConfirmed.classList.contains('d-none')) {
                        contentConfirmed.classList.add('d-none');
                    }
                } else {
                    contentConfirmedReact.classList.add('d-none');
                }
            }
        </script>
    {% endif %}

{% endblock %}
